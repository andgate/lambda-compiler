module Main

extern int2str : I32 -> *I8 -> *I8
extern puts : *I8 -> I32
extern malloc : I32 -> *I8
extern free : *I8 -> I8

type Unit = Unit
type Nat = Zero | Succ *Nat

int2nat : I32 -> *Nat
int2nat x = 
  if #eq x 0 then
    new Zero
  else
    new Succ (int2nat (#sub x 1))

nat2int : *Nat -> I32
nat2int n =
  case *n of
    Zero -> 0
    Succ n1 -> #add 1 (nat2int n1)

sumN : *Nat -> *Nat -> *Nat
sumN a b =
  case *a of
    Zero ->
      case *b of
        Zero -> new Zero
        Succ b1 -> new Succ (sumN a b1)
    Succ a1 -> new Succ (sumN a1 b)

deleteNat : *Nat -> Unit
deleteNat n =
  case *n of
    Zero    -> let _ = delete n in Unit
    Succ n1 ->
      let _ = delete n in
      deleteNat n1


printNat : *Nat -> I32
printNat n = printInt (nat2int n)

printInt : I32 -> I32
printInt x = puts (int2str x (String 11))

main : I32 -> **I8 -> I32
main argc argv =
  let x = int2nat 12929
      y = int2nat 23232
      z = sumN x y
      _ = printNat x
      _ = printNat y
      _ = printNat z
      _ = deleteNat x
      _ = deleteNat y
      _ = deleteNat z
  in 0